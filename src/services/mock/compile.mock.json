{
    "data": {
      "success": true,
      "message": [
        "[INFO]: Checking for the Wasm target...",
        "[INFO]: Compiling to Wasm...",
        "   Compiling proc-macro2 v1.0.36",
        "   Compiling unicode-xid v0.2.2",
        "   Compiling syn v1.0.89",
        "   Compiling wasm-bindgen-shared v0.2.79",
        "   Compiling log v0.4.14",
        "   Compiling cfg-if v1.0.0",
        "   Compiling lazy_static v1.4.0",
        "   Compiling bumpalo v3.9.1",
        "   Compiling wasm-bindgen v0.2.79",
        "   Compiling quote v1.0.16",
        "   Compiling wasm-bindgen-backend v0.2.79",
        "   Compiling wasm-bindgen-macro-support v0.2.79",
        "   Compiling wasm-bindgen-macro v0.2.79",
        "   Compiling console_error_panic_hook v0.1.7",
        "   Compiling AuraIDE v0.1.0 (C:\\Users\\lqtua\\source\\repos\\AuraIDE\\AuraIDE\\3246c133-830a-9601-b6a2-0cf7cff3d144\\Template\\root)",
        "warning: crate `AuraIDE` should have a snake case name",
        "  |",
        "  = note: `#[warn(non_snake_case)]` on by default",
        "  = help: convert the identifier to snake case: `aura_ide`",
        "",
        "warning: `AuraIDE` (lib) generated 1 warning",
        "    Finished release [optimized] target(s) in 9.53s",
        "[WARN]: :-) origin crate has no README",
        "[INFO]: Installing wasm-bindgen...",
        "[INFO]: Optimizing wasm binaries with `wasm-opt`...",
        "[INFO]: Optional fields missing from Cargo.toml: 'description', 'repository', and 'license'. These are not necessary, but recommended",
        "[INFO]: :-) Done in 9.99s",
        "[INFO]: :-) Your wasm pkg is ready to publish at C:\\Users\\lqtua\\source\\repos\\AuraIDE\\AuraIDE\\3246c133-830a-9601-b6a2-0cf7cff3d144\\Template\\root\\pkg.",
        ""
      ],
      "wasm": "",
      "jsSchema": "let wasm;/*** @param {number} lhs* @param {number} rhs* @returns {boolean}*/function is_divisible_by(lhs, rhs) {    var ret = wasm.is_divisible_by(lhs, rhs);    return ret !== 0;}/*** @param {number} a* @param {number} b* @returns {number}*/function sum(a, b) {    var ret = wasm.sum(a, b);    return ret >>> 0;}/*** @param {number} a* @param {number} b* @returns {number}*/function sub(a, b) {    var ret = wasm.sub(a, b);    return ret >>> 0;}/*** @param {number} a* @param {number} b* @returns {number}*/function div(a, b) {    var ret = wasm.div(a, b);    return ret >>> 0;}/*** @param {number} a* @param {number} b* @returns {number}*/function mul(a, b) {    var ret = wasm.mul(a, b);    return ret >>> 0;}async function load(module, imports) {    if (typeof Response === 'function' && module instanceof Response) {        if (typeof WebAssembly.instantiateStreaming === 'function') {            try {                return await WebAssembly.instantiateStreaming(module, imports);            } catch (e) {                if (module.headers.get('Content-Type') != 'application/wasm') {                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);                } else {                    throw e;                }            }        }        const bytes = await module.arrayBuffer();        return await WebAssembly.instantiate(bytes, imports);    } else {        const instance = await WebAssembly.instantiate(module, imports);        if (instance instanceof WebAssembly.Instance) {            return { instance, module };        } else {            return instance;        }    }} async function init(input) {    if (typeof input === 'undefined') {        input = new URL('AuraIDE_bg.wasm', import.meta.url);    }    const imports = {};    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {        input = fetch(input);    }    const { instance, module } = await load(await input, imports);    wasm = instance.exports;    init.__wbindgen_wasm_module = module;    return wasm;}"
    }
  }
